class Numbers::Parser

rule

number     : num END
num        : scientific
           | floating
           | integer
           | hexa
hexa       : hex hexa               {result = val.join}
           | hex
hex        : HEXLETTER
           | E
           | UNSIGNED
scientific : floating E signed      {result = val.join}
           | integer  E signed      {result = val.join}
floating   : integer POINT UNSIGNED {result = val.join}
integer    : signed
           | UNSIGNED
signed     : SIGN UNSIGNED          {result = val.join}

end

---- inner ----
  def parse(tokens)
    # @yydebug = true
    @tokens = tokens
    do_parse
  end

  def do_scientific(args)
    if args[1] !~ /[eE]/
      raise ArgumentError, "Invalid scientific number - expected [eE] but got " + args[1]
    end
    args.join
  end

  def on_error( *args )
    $stderr.puts "on_error called: args=#{args.inspect}"
  end

  def next_token
    @tokens.shift
  end

